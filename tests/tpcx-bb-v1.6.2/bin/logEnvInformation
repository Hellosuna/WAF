#!/usr/bin/env bash

#
# Copyright (C) 2019 Transaction Processing Performance Council (TPC) and/or its contributors.
# This file is part of a software package distributed by the TPC
# The contents of this file have been developed by the TPC, and/or have been licensed to the TPC under one or more contributor
# license agreements.
# This file is subject to the terms and conditions outlined in the End-User
# License Agreement (EULA) which can be found in this distribution (EULA.txt) and is available at the following URL:
# http://www.tpc.org/TPC_Documents_Current_Versions/txt/EULA.txt
# Unless required by applicable law or agreed to in writing, this software is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, and the user bears the entire risk as to quality
# and performance as well as the entire cost of service or repair in case of defect. See the EULA for more details.
# 
#


#
# Copyright 2015-2019 Intel Corporation.
# This software and the related documents are Intel copyrighted materials, and your use of them 
# is governed by the express license under which they were provided to you ("License"). Unless the 
# License provides otherwise, you may not use, modify, copy, publish, distribute, disclose or 
# transmit this software or the related documents without Intel's prior written permission.
# 
# This software and the related documents are provided as is, with no express or implied warranties, 
# other than those that are expressly stated in the License.
# 
#


helpModule () {
  echo "This module generates a zip file of all logs available in $BIG_BENCH_LOGS_DIR"
  echo
  echo "Options:"
  echo -e "-h\tshow this help"
}

runModule () {
  local ENV_INFO_FILE="$BIG_BENCH_LOGS_DIR/envInfoBigBench.log"

  if [ -d "$BIG_BENCH_LOGS_DIR" ]
  then
    > "$ENV_INFO_FILE"
    if [ -w "$ENV_INFO_FILE" ]
    then
      echo "########################################" >> "$ENV_INFO_FILE" 2>&1
      echo "#      Big Data Benchmark Version      #" >> "$ENV_INFO_FILE" 2>&1
      echo "########################################" >> "$ENV_INFO_FILE" 2>&1
      echo "Version $BIG_BENCH_VERSION" >> "$ENV_INFO_FILE" 2>&1

      echo >> "$ENV_INFO_FILE" 2>&1
      echo "Distribution path: ${BIG_BENCH_DEFAULT_DISTRO_LOCATION}" >> "$ENV_INFO_FILE" 2>&1
      local ENGINE_ENV_INFO_FILE=${BIG_BENCH_HOME}/distributions/${BIG_BENCH_DEFAULT_DISTRO_LOCATION}/logEngineEnvInfo
      if [ -x ${ENGINE_ENV_INFO_FILE} ]; then
        . ${ENGINE_ENV_INFO_FILE} >> "$ENV_INFO_FILE"
      else
        . ${BIG_BENCH_BIN_DIR}/${DEFAULT_ENGINE_ENV_INFO_FILE} >> "$ENV_INFO_FILE" 2>/dev/null
      fi

      echo >> "$ENV_INFO_FILE" 2>&1

      echo "########################################" >> "$ENV_INFO_FILE" 2>&1
      echo "#         Command line options         #" >> "$ENV_INFO_FILE" 2>&1
      echo "########################################" >> "$ENV_INFO_FILE" 2>&1
      echo "$LIST_OF_USER_OPTIONS" >> "$ENV_INFO_FILE" 2>&1
    fi

    if [ $BIG_BENCH_ENGINE != "sql" ];then
    local HOST_LIST="`mktemp`"
    # ignore the first two lines of the yarn cmd output
    yarn node -list -all | sed -e '1,2d' | cut -d: -f1 > "$HOST_LIST"
    hostname >> "$HOST_LIST"

    if [ -s "$HOST_LIST" ]
    then
      "$BIG_BENCH_PSSH_BINARY" -h "$HOST_LIST" -t0 "scp $HOSTNAME:$BIG_BENCH_BIN_DIR/getEnvInfo.sh /tmp/"
      "$BIG_BENCH_PSSH_BINARY" -h "$HOST_LIST" -t0 '/tmp/getEnvInfo.sh'
      "$BIG_BENCH_PSSH_BINARY" -h "$HOST_LIST" -t0 "scp /tmp/envInfo*.zip $HOSTNAME:$BIG_BENCH_LOGS_DIR/"
    else
      echo "Error: yarn was not able to find any hosts."
    fi
    fi

    rm -rf "$HOST_LIST"
  fi
}
