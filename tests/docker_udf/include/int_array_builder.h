#ifndef INT_ARRAY_BUILDER_H
#define INT_ARRAY_BUILDER_H

/* Generated by flatcc 0.6.1 FlatBuffers schema compiler for C by dvide.com */

#ifndef INT_ARRAY_READER_H
#include "int_array_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

static const flatbuffers_voffset_t __IntArray_required[] = { 0 };
typedef flatbuffers_ref_t IntArray_ref_t;
static IntArray_ref_t IntArray_clone(flatbuffers_builder_t *B, IntArray_table_t t);
__flatbuffers_build_table(flatbuffers_, IntArray, 1)

#define __IntArray_formal_args , flatbuffers_int32_vec_ref_t v0
#define __IntArray_call_args , v0
static inline IntArray_ref_t IntArray_create(flatbuffers_builder_t *B __IntArray_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, IntArray, IntArray_file_identifier, IntArray_type_identifier)

__flatbuffers_build_vector_field(0, flatbuffers_, IntArray_values, flatbuffers_int32, int32_t, IntArray)

static inline IntArray_ref_t IntArray_create(flatbuffers_builder_t *B __IntArray_formal_args)
{
    if (IntArray_start(B)
        || IntArray_values_add(B, v0)) {
        return 0;
    }
    return IntArray_end(B);
}

static IntArray_ref_t IntArray_clone(flatbuffers_builder_t *B, IntArray_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (IntArray_start(B)
        || IntArray_values_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, IntArray_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* INT_ARRAY_BUILDER_H */
