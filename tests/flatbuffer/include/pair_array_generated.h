// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PAIRARRAY_H_
#define FLATBUFFERS_GENERATED_PAIRARRAY_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

struct Pair;
struct PairBuilder;

struct PairArray;
struct PairArrayBuilder;

struct Pair FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PairBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIRST = 4,
    VT_SECOND = 6
  };
  int64_t first() const {
    return GetField<int64_t>(VT_FIRST, 0);
  }
  int64_t second() const {
    return GetField<int64_t>(VT_SECOND, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_FIRST, 8) &&
           VerifyField<int64_t>(verifier, VT_SECOND, 8) &&
           verifier.EndTable();
  }
};

struct PairBuilder {
  typedef Pair Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_first(int64_t first) {
    fbb_.AddElement<int64_t>(Pair::VT_FIRST, first, 0);
  }
  void add_second(int64_t second) {
    fbb_.AddElement<int64_t>(Pair::VT_SECOND, second, 0);
  }
  explicit PairBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Pair> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Pair>(end);
    return o;
  }
};

inline flatbuffers::Offset<Pair> CreatePair(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t first = 0,
    int64_t second = 0) {
  PairBuilder builder_(_fbb);
  builder_.add_second(second);
  builder_.add_first(first);
  return builder_.Finish();
}

struct PairArray FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PairArrayBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAIRS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Pair>> *pairs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Pair>> *>(VT_PAIRS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PAIRS) &&
           verifier.VerifyVector(pairs()) &&
           verifier.VerifyVectorOfTables(pairs()) &&
           verifier.EndTable();
  }
};

struct PairArrayBuilder {
  typedef PairArray Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pairs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Pair>>> pairs) {
    fbb_.AddOffset(PairArray::VT_PAIRS, pairs);
  }
  explicit PairArrayBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PairArray> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PairArray>(end);
    return o;
  }
};

inline flatbuffers::Offset<PairArray> CreatePairArray(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Pair>>> pairs = 0) {
  PairArrayBuilder builder_(_fbb);
  builder_.add_pairs(pairs);
  return builder_.Finish();
}

inline flatbuffers::Offset<PairArray> CreatePairArrayDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Pair>> *pairs = nullptr) {
  auto pairs__ = pairs ? _fbb.CreateVector<flatbuffers::Offset<Pair>>(*pairs) : 0;
  return CreatePairArray(
      _fbb,
      pairs__);
}

inline const PairArray *GetPairArray(const void *buf) {
  return flatbuffers::GetRoot<PairArray>(buf);
}

inline const PairArray *GetSizePrefixedPairArray(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<PairArray>(buf);
}

inline bool VerifyPairArrayBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PairArray>(nullptr);
}

inline bool VerifySizePrefixedPairArrayBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PairArray>(nullptr);
}

inline void FinishPairArrayBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PairArray> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPairArrayBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PairArray> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_PAIRARRAY_H_
