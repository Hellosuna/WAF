// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_YEARMONTHDAY_H_
#define FLATBUFFERS_GENERATED_YEARMONTHDAY_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

struct YearMonthDay;
struct YearMonthDayBuilder;

struct YearMonthDay FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef YearMonthDayBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DAY = 4,
    VT_MONTH = 6,
    VT_YEAR = 8
  };
  int8_t day() const {
    return GetField<int8_t>(VT_DAY, 0);
  }
  int8_t month() const {
    return GetField<int8_t>(VT_MONTH, 0);
  }
  int16_t year() const {
    return GetField<int16_t>(VT_YEAR, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_DAY, 1) &&
           VerifyField<int8_t>(verifier, VT_MONTH, 1) &&
           VerifyField<int16_t>(verifier, VT_YEAR, 2) &&
           verifier.EndTable();
  }
};

struct YearMonthDayBuilder {
  typedef YearMonthDay Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_day(int8_t day) {
    fbb_.AddElement<int8_t>(YearMonthDay::VT_DAY, day, 0);
  }
  void add_month(int8_t month) {
    fbb_.AddElement<int8_t>(YearMonthDay::VT_MONTH, month, 0);
  }
  void add_year(int16_t year) {
    fbb_.AddElement<int16_t>(YearMonthDay::VT_YEAR, year, 0);
  }
  explicit YearMonthDayBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<YearMonthDay> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<YearMonthDay>(end);
    return o;
  }
};

inline flatbuffers::Offset<YearMonthDay> CreateYearMonthDay(
    flatbuffers::FlatBufferBuilder &_fbb,
    int8_t day = 0,
    int8_t month = 0,
    int16_t year = 0) {
  YearMonthDayBuilder builder_(_fbb);
  builder_.add_year(year);
  builder_.add_month(month);
  builder_.add_day(day);
  return builder_.Finish();
}

inline const YearMonthDay *GetYearMonthDay(const void *buf) {
  return flatbuffers::GetRoot<YearMonthDay>(buf);
}

inline const YearMonthDay *GetSizePrefixedYearMonthDay(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<YearMonthDay>(buf);
}

inline bool VerifyYearMonthDayBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<YearMonthDay>(nullptr);
}

inline bool VerifySizePrefixedYearMonthDayBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<YearMonthDay>(nullptr);
}

inline void FinishYearMonthDayBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<YearMonthDay> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedYearMonthDayBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<YearMonthDay> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_YEARMONTHDAY_H_
