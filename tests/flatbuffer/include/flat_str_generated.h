// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FLATSTR_H_
#define FLATBUFFERS_GENERATED_FLATSTR_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

struct FlatStr;
struct FlatStrBuilder;

struct FlatStr FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FlatStrBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STR = 4
  };
  const flatbuffers::String *str() const {
    return GetPointer<const flatbuffers::String *>(VT_STR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STR) &&
           verifier.VerifyString(str()) &&
           verifier.EndTable();
  }
};

struct FlatStrBuilder {
  typedef FlatStr Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_str(flatbuffers::Offset<flatbuffers::String> str) {
    fbb_.AddOffset(FlatStr::VT_STR, str);
  }
  explicit FlatStrBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FlatStr> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FlatStr>(end);
    return o;
  }
};

inline flatbuffers::Offset<FlatStr> CreateFlatStr(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> str = 0) {
  FlatStrBuilder builder_(_fbb);
  builder_.add_str(str);
  return builder_.Finish();
}

inline flatbuffers::Offset<FlatStr> CreateFlatStrDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *str = nullptr) {
  auto str__ = str ? _fbb.CreateString(str) : 0;
  return CreateFlatStr(
      _fbb,
      str__);
}

inline const FlatStr *GetFlatStr(const void *buf) {
  return flatbuffers::GetRoot<FlatStr>(buf);
}

inline const FlatStr *GetSizePrefixedFlatStr(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FlatStr>(buf);
}

inline bool VerifyFlatStrBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatStr>(nullptr);
}

inline bool VerifySizePrefixedFlatStrBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatStr>(nullptr);
}

inline void FinishFlatStrBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlatStr> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFlatStrBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlatStr> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_FLATSTR_H_
