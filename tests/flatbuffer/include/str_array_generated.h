// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STRARRAY_H_
#define FLATBUFFERS_GENERATED_STRARRAY_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

struct String;
struct StringBuilder;

struct StringArray;
struct StringArrayBuilder;

struct String FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef StringBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SENTIMENT = 4,
    VT_WORD = 6,
    VT_SENTENCE = 8
  };
  const flatbuffers::String *sentiment() const {
    return GetPointer<const flatbuffers::String *>(VT_SENTIMENT);
  }
  const flatbuffers::String *word() const {
    return GetPointer<const flatbuffers::String *>(VT_WORD);
  }
  const flatbuffers::String *sentence() const {
    return GetPointer<const flatbuffers::String *>(VT_SENTENCE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SENTIMENT) &&
           verifier.VerifyString(sentiment()) &&
           VerifyOffset(verifier, VT_WORD) &&
           verifier.VerifyString(word()) &&
           VerifyOffset(verifier, VT_SENTENCE) &&
           verifier.VerifyString(sentence()) &&
           verifier.EndTable();
  }
};

struct StringBuilder {
  typedef String Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sentiment(flatbuffers::Offset<flatbuffers::String> sentiment) {
    fbb_.AddOffset(String::VT_SENTIMENT, sentiment);
  }
  void add_word(flatbuffers::Offset<flatbuffers::String> word) {
    fbb_.AddOffset(String::VT_WORD, word);
  }
  void add_sentence(flatbuffers::Offset<flatbuffers::String> sentence) {
    fbb_.AddOffset(String::VT_SENTENCE, sentence);
  }
  explicit StringBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<String> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<String>(end);
    return o;
  }
};

inline flatbuffers::Offset<String> CreateString(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> sentiment = 0,
    flatbuffers::Offset<flatbuffers::String> word = 0,
    flatbuffers::Offset<flatbuffers::String> sentence = 0) {
  StringBuilder builder_(_fbb);
  builder_.add_sentence(sentence);
  builder_.add_word(word);
  builder_.add_sentiment(sentiment);
  return builder_.Finish();
}

inline flatbuffers::Offset<String> CreateStringDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *sentiment = nullptr,
    const char *word = nullptr,
    const char *sentence = nullptr) {
  auto sentiment__ = sentiment ? _fbb.CreateString(sentiment) : 0;
  auto word__ = word ? _fbb.CreateString(word) : 0;
  auto sentence__ = sentence ? _fbb.CreateString(sentence) : 0;
  return CreateString(
      _fbb,
      sentiment__,
      word__,
      sentence__);
}

struct StringArray FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef StringArrayBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ARRAYS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<String>> *arrays() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<String>> *>(VT_ARRAYS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ARRAYS) &&
           verifier.VerifyVector(arrays()) &&
           verifier.VerifyVectorOfTables(arrays()) &&
           verifier.EndTable();
  }
};

struct StringArrayBuilder {
  typedef StringArray Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_arrays(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<String>>> arrays) {
    fbb_.AddOffset(StringArray::VT_ARRAYS, arrays);
  }
  explicit StringArrayBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<StringArray> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<StringArray>(end);
    return o;
  }
};

inline flatbuffers::Offset<StringArray> CreateStringArray(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<String>>> arrays = 0) {
  StringArrayBuilder builder_(_fbb);
  builder_.add_arrays(arrays);
  return builder_.Finish();
}

inline flatbuffers::Offset<StringArray> CreateStringArrayDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<String>> *arrays = nullptr) {
  auto arrays__ = arrays ? _fbb.CreateVector<flatbuffers::Offset<String>>(*arrays) : 0;
  return CreateStringArray(
      _fbb,
      arrays__);
}

inline const StringArray *GetStringArray(const void *buf) {
  return flatbuffers::GetRoot<StringArray>(buf);
}

inline const StringArray *GetSizePrefixedStringArray(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<StringArray>(buf);
}

inline bool VerifyStringArrayBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<StringArray>(nullptr);
}

inline bool VerifySizePrefixedStringArrayBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<StringArray>(nullptr);
}

inline void FinishStringArrayBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<StringArray> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedStringArrayBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<StringArray> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_STRARRAY_H_
