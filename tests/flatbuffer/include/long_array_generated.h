// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LONGARRAY_H_
#define FLATBUFFERS_GENERATED_LONGARRAY_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

struct LongArray;
struct LongArrayBuilder;

struct LongArray FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LongArrayBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUES = 4
  };
  const flatbuffers::Vector<int64_t> *values() const {
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_VALUES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           verifier.EndTable();
  }
};

struct LongArrayBuilder {
  typedef LongArray Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_values(flatbuffers::Offset<flatbuffers::Vector<int64_t>> values) {
    fbb_.AddOffset(LongArray::VT_VALUES, values);
  }
  explicit LongArrayBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LongArray> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LongArray>(end);
    return o;
  }
};

inline flatbuffers::Offset<LongArray> CreateLongArray(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int64_t>> values = 0) {
  LongArrayBuilder builder_(_fbb);
  builder_.add_values(values);
  return builder_.Finish();
}

inline flatbuffers::Offset<LongArray> CreateLongArrayDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int64_t> *values = nullptr) {
  auto values__ = values ? _fbb.CreateVector<int64_t>(*values) : 0;
  return CreateLongArray(
      _fbb,
      values__);
}

inline const LongArray *GetLongArray(const void *buf) {
  return flatbuffers::GetRoot<LongArray>(buf);
}

inline const LongArray *GetSizePrefixedLongArray(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<LongArray>(buf);
}

inline bool VerifyLongArrayBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<LongArray>(nullptr);
}

inline bool VerifySizePrefixedLongArrayBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<LongArray>(nullptr);
}

inline void FinishLongArrayBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<LongArray> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLongArrayBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<LongArray> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_LONGARRAY_H_
