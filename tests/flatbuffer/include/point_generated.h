// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POINT_H_
#define FLATBUFFERS_GENERATED_POINT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

struct FlatPoint;
struct FlatPointBuilder;

struct FlatPoint FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FlatPointBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  double x() const {
    return GetField<double>(VT_X, 0.0);
  }
  double y() const {
    return GetField<double>(VT_Y, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_X, 8) &&
           VerifyField<double>(verifier, VT_Y, 8) &&
           verifier.EndTable();
  }
};

struct FlatPointBuilder {
  typedef FlatPoint Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(double x) {
    fbb_.AddElement<double>(FlatPoint::VT_X, x, 0.0);
  }
  void add_y(double y) {
    fbb_.AddElement<double>(FlatPoint::VT_Y, y, 0.0);
  }
  explicit FlatPointBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FlatPoint> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FlatPoint>(end);
    return o;
  }
};

inline flatbuffers::Offset<FlatPoint> CreateFlatPoint(
    flatbuffers::FlatBufferBuilder &_fbb,
    double x = 0.0,
    double y = 0.0) {
  FlatPointBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline const FlatPoint *GetFlatPoint(const void *buf) {
  return flatbuffers::GetRoot<FlatPoint>(buf);
}

inline const FlatPoint *GetSizePrefixedFlatPoint(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FlatPoint>(buf);
}

inline bool VerifyFlatPointBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPoint>(nullptr);
}

inline bool VerifySizePrefixedFlatPointBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPoint>(nullptr);
}

inline void FinishFlatPointBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlatPoint> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFlatPointBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlatPoint> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_POINT_H_
