// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DOUBLEARRAY_H_
#define FLATBUFFERS_GENERATED_DOUBLEARRAY_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

struct DArray;
struct DArrayBuilder;

struct DArray FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DArrayBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUES = 4
  };
  const flatbuffers::Vector<double> *values() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_VALUES);
  }
  flatbuffers::Vector<double> *mutable_values() {
    return GetPointer<flatbuffers::Vector<double> *>(VT_VALUES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           verifier.EndTable();
  }
};

struct DArrayBuilder {
  typedef DArray Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_values(flatbuffers::Offset<flatbuffers::Vector<double>> values) {
    fbb_.AddOffset(DArray::VT_VALUES, values);
  }
  explicit DArrayBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DArray> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DArray>(end);
    return o;
  }
};

inline flatbuffers::Offset<DArray> CreateDArray(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<double>> values = 0) {
  DArrayBuilder builder_(_fbb);
  builder_.add_values(values);
  return builder_.Finish();
}

inline flatbuffers::Offset<DArray> CreateDArrayDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<double> *values = nullptr) {
  auto values__ = values ? _fbb.CreateVector<double>(*values) : 0;
  return CreateDArray(
      _fbb,
      values__);
}

inline const DArray *GetDArray(const void *buf) {
  return flatbuffers::GetRoot<DArray>(buf);
}

inline const DArray *GetSizePrefixedDArray(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DArray>(buf);
}

inline DArray *GetMutableDArray(void *buf) {
  return flatbuffers::GetMutableRoot<DArray>(buf);
}

inline DArray *GetMutableSizePrefixedDArray(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<DArray>(buf);
}

inline bool VerifyDArrayBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DArray>(nullptr);
}

inline bool VerifySizePrefixedDArrayBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DArray>(nullptr);
}

inline void FinishDArrayBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DArray> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDArrayBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DArray> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_DOUBLEARRAY_H_
