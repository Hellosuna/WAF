diff --git a/clang/lib/CodeGen/CGBuilder.h b/clang/lib/CodeGen/CGBuilder.h
index 2fcfea64e..fbc30ff2f 100644
--- a/clang/lib/CodeGen/CGBuilder.h
+++ b/clang/lib/CodeGen/CGBuilder.h
@@ -195,11 +195,18 @@ public:
     const llvm::DataLayout &DL = BB->getParent()->getParent()->getDataLayout();
     const llvm::StructLayout *Layout = DL.getStructLayout(ElTy);
     auto Offset = CharUnits::fromQuantity(Layout->getElementOffset(Index));
-
-    return Address(
-        CreateStructGEP(Addr.getElementType(), Addr.getPointer(), Index, Name),
-        ElTy->getElementType(Index),
-        Addr.getAlignment().alignmentAtOffset(Offset));
+    llvm::Function *dropped_func =
+        TypeCache.get_dropped_function(ElTy->getName());
+    llvm::Value *ptr =
+        CreateStructGEP(Addr.getElementType(), Addr.getPointer(), Index, Name);
+    if (!dropped_func) {
+      std::array<llvm::Value *, 2> argv_array{ptr, getInt32(Index)};
+      llvm::ArrayRef<llvm::Value *> argv(argv_array);
+      ptr = CreateCall(dropped_func->getFunctionType(), dropped_func);
+    }
+
+    return Address(ptr, ElTy->getElementType(Index),
+                   Addr.getAlignment().alignmentAtOffset(Offset));
   }
 
   /// Given
diff --git a/clang/lib/CodeGen/CodeGenModule.cpp b/clang/lib/CodeGen/CodeGenModule.cpp
index 12d602fed..6a7f5b5d9 100644
--- a/clang/lib/CodeGen/CodeGenModule.cpp
+++ b/clang/lib/CodeGen/CodeGenModule.cpp
@@ -7214,3 +7214,59 @@ void CodeGenModule::moveLazyEmissionStates(CodeGenModule *NewBuilder) {
 
   NewBuilder->ABI->MangleCtx = std::move(ABI->MangleCtx);
 }
+
+void CodeGenModule::EmitStructDroppedFunc(RecordDecl *RD) {
+  llvm::StructType *Ty = Types.ConvertRecordDeclType(RD);
+  std::vector<llvm::Type *> func_parameters{this->IntPtrTy, this->Int32Ty};
+
+  llvm::FunctionType *function_type =
+      llvm::FunctionType::get(this->IntPtrTy, func_parameters, false);
+
+  llvm::Function *dropped_func = llvm::Function::Create(
+      function_type, llvm::GlobalValue::PrivateLinkage,
+      Ty->getStructName().str() + "_dropped_func", this->getModule());
+
+  dropped_func->getArg(0)->setName("ptr");
+  dropped_func->getArg(1)->setName("idx");
+  llvm::LLVMContext &context = dropped_func->getContext();
+  llvm::IRBuilder<> builder(context);
+
+  llvm::BasicBlock *init_block =
+      llvm::BasicBlock::Create(context, "init", dropped_func);
+  llvm::BasicBlock *if_then_block =
+      llvm::BasicBlock::Create(context, "if.then", dropped_func);
+  llvm::BasicBlock *if_else_block =
+      llvm::BasicBlock::Create(context, "if.else", dropped_func);
+
+  builder.SetInsertPoint(init_block);
+
+  llvm::Value *ptr_i32 = builder.CreatePtrToInt(
+      dropped_func->getArg(0), builder.getInt32Ty(), "ptr_i32");
+
+  // if (ptr > ptr_upper)
+  llvm::Constant *ptr_upper = builder.getInt32(1 * 1024 * 1024 * 1024);
+  llvm::Value *condition = builder.CreateICmpSLT(ptr_i32, ptr_upper);
+  builder.CreateCondBr(condition, if_then_block, if_else_block);
+
+  // return offset
+  builder.SetInsertPoint(if_then_block);
+  builder.CreateRet(dropped_func->getArg(0));
+
+  // else
+  builder.SetInsertPoint(if_else_block);
+
+  // dropped_offset = 4*idx;
+  llvm::Value *dropped_offset = builder.CreateMul(
+      dropped_func->getArg(1), builder.getInt32(4), "dropped_offset");
+  // new_ptr = ptr + dropped_offset;
+  llvm::Value *new_ptr_i32 =
+      builder.CreateAdd(ptr_i32, dropped_offset, "new_ptr_i32");
+  llvm::Value *new_ptr =
+      builder.CreateIntToPtr(new_ptr_i32, builder.getPtrTy(), "new_ptr");
+
+  // Value *new_offset = builder.getInt32(0);
+  //  return new_offset
+  builder.CreateRet(new_ptr);
+
+  this->insert_dropped_function(Ty->getStructName(), dropped_func);
+}
diff --git a/clang/lib/CodeGen/CodeGenModule.h b/clang/lib/CodeGen/CodeGenModule.h
index b3354657b..d1de05b12 100644
--- a/clang/lib/CodeGen/CodeGenModule.h
+++ b/clang/lib/CodeGen/CodeGenModule.h
@@ -1183,6 +1183,8 @@ public:
   // Make sure that this type is translated.
   void UpdateCompletedType(const TagDecl *TD);
 
+  void EmitStructDroppedFunc(RecordDecl *RD);
+
   llvm::Constant *getMemberPointerConstant(const UnaryOperator *e);
 
   /// Emit type info if type of an expression is a variably modified
diff --git a/clang/lib/CodeGen/CodeGenTypeCache.h b/clang/lib/CodeGen/CodeGenTypeCache.h
index e848dc3b4..0058b23d4 100644
--- a/clang/lib/CodeGen/CodeGenTypeCache.h
+++ b/clang/lib/CodeGen/CodeGenTypeCache.h
@@ -16,6 +16,8 @@
 #include "clang/AST/CharUnits.h"
 #include "clang/Basic/AddressSpaces.h"
 #include "llvm/IR/CallingConv.h"
+#include <llvm/ADT/DenseMap.h>
+#include <llvm/IR/Function.h>
 
 namespace llvm {
   class Type;
@@ -78,6 +80,16 @@ struct CodeGenTypeCache {
   /// void* in the address space for constant globals
   llvm::PointerType *ConstGlobalsPtrTy;
 
+  llvm::DenseMap<llvm::StringRef, llvm::Function *> dropped_functions;
+
+  void insert_dropped_function(llvm::StringRef name, llvm::Function *func) {
+    dropped_functions[name] = func;
+  }
+
+  llvm::Function *get_dropped_function(llvm::StringRef name) const {
+    return dropped_functions.lookup(name);
+  }
+
   /// The size and alignment of the builtin C type 'int'.  This comes
   /// up enough in various ABI lowering tasks to be worth pre-computing.
   union {
diff --git a/clang/lib/CodeGen/ModuleBuilder.cpp b/clang/lib/CodeGen/ModuleBuilder.cpp
index e3e953c34..da0784a4c 100644
--- a/clang/lib/CodeGen/ModuleBuilder.cpp
+++ b/clang/lib/CodeGen/ModuleBuilder.cpp
@@ -242,6 +242,9 @@ namespace {
 
       Builder->UpdateCompletedType(D);
 
+      if (RecordDecl *RD = dyn_cast<RecordDecl>(D))
+        Builder->EmitStructDroppedFunc(RD);
+
       // For MSVC compatibility, treat declarations of static data members with
       // inline initializers as definitions.
       if (Ctx->getTargetInfo().getCXXABI().isMicrosoft()) {
